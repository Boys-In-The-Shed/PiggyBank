name: deploy
on:
    push:
        branches:
            - master
jobs:

    lambda-build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-dotnet@v1.7.2
              with:
                dotnet-version: '3.1.x'
            - run: chmod u+x ./scripts/build-lambda.sh
            - run: ./scripts/build-lambda.sh
            - uses: actions/upload-artifact@v2
              with:
                  name: pb-lambda-package
                  path: pb-lambda-package.zip

    react-build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2
              with:
                node-version: "14"
            - run: chmod u+x ./scripts/build-react.sh
            - run: ./scripts/build-react.sh
            - uses: actions/upload-artifact@v2
              with:
                  name: react-build
                  path: src/pb-app/build
            - uses: actions/upload-artifact@v2
              with:
                  name: build-directory
                  path: src/pb-app/build

    deploy:
        runs-on: ubuntu-latest
        needs:
            - lambda-build
            - react-build
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            TF_VAR_environment_name: production
        steps:
            - uses: actions/checkout@v2
            - uses: hashicorp/setup-terraform@v1
              with:
                terraform_wrapper: false
            - uses: actions/download-artifact@v2
              with:
                  name: pb-lambda-package
                  path: pb-lambda-package
            - uses: actions/download-artifact@v2
              with:
                  name: build-directory
                  path: src/pb-app/build
            - run: mv ./pb-lambda-package/pb-lambda-package.zip ./pb-lambda-package.zip
            - run: chmod u+x ./scripts/deploy-only.sh
            - run: chmod u+x ./scripts/iac-init.sh
            - run: chmod u+x ./scripts/iac-plan.sh
            - run: chmod u+x ./scripts/iac-apply.sh
            - run: chmod u+x ./scripts/iac-output.sh
            - run: ./scripts/deploy-only.sh
            - id: output-step
              run: ./iac-output-react.sh
        outputs:
            CLOUDFRONT_ID: ${{ steps.output-step.outputs.CLOUDFRONT_ID }}

    invalidate-react-cache:
        runs-on: ubuntu-latest
        needs: deploy
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: us-east-1
        steps:
            - run: aws cloudfront create-invalidation --distribution-id ${{ needs.deploy.outputs.CLOUDFRONT_ID }} --paths "/*"